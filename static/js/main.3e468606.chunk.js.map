{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","style","border","alt","src","CardList","cats","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","height","children","CHANGE_SEARCH_FIELD","REQUEST_CATS_PENDING","REQUEST_CATS_SUCCESS","REQUEST_CATS_FAILED","App","this","onRequestCats","searchField","onSearchChange","isPending","filteredCats","filter","cat","toLowerCase","includes","Component","connect","state","searchCats","requestCats","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialState","initialStateCats","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3e468606.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='tc grow bg-transparent br3 pa4 ma3 dib bw2 shadow-5'\r\n\t\t\tstyle={{\r\n\t\t\t\tborder: '2px solid black',\r\n\t\t\t}}>\r\n\t\t\t<img\r\n\t\t\t\talt='cat'\r\n\t\t\t\tsrc={`https://robohash.org/${id}?set=set4`}\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ cats }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        cats.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={cats[i].id}\r\n              name={cats[i].name}\r\n              email={cats[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Cats'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\toverflowY: 'scroll',\r\n\t\t\t\tborder: '5px solid black',\r\n\t\t\t\theight: '500px',\r\n\t\t\t}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_CATS_PENDING = 'REQUEST_CATS_PENDING';\r\nexport const REQUEST_CATS_SUCCESS = 'REQUEST_CATS_SUCCESS';\r\nexport const REQUEST_CATS_FAILED = 'REQUEST_CATS_FAILED';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestCats } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchCats.searchField,\r\n\t\tcats: state.requestCats.cats,\r\n\t\tisPending: state.requestCats.isPending,\r\n\t\terror: state.requestCats.error,\r\n\t};\r\n};\r\n\r\n// dispatch - triggers action\r\nconst MapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestCats: () => dispatch(requestCats()),\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\t/* constructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcats: [],\r\n\t\t\t// searchfield: '',\r\n\t\t};\r\n\t} */\r\n\r\n\tcomponentDidMount() {\r\n\t\t/* fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((users) => {\r\n\t\t\t\tthis.setState({ cats: users });\r\n\t\t\t}); */\r\n\t\tthis.props.onRequestCats();\r\n\t}\r\n\r\n\t/* onSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t};\r\n */\r\n\trender() {\r\n\t\t/* const { cats  , searchfield  } = this.state; */\r\n\t\tconst { searchField, onSearchChange, cats, isPending } = this.props;\r\n\t\tconst filteredCats = cats.filter((cat) => {\r\n\t\t\treturn cat.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn isPending ? (\r\n\t\t\t<h1>Loading</h1>\r\n\t\t) : (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>KittyFriends</h1>\r\n\t\t\t\t{/* <SearchBox searchChange={this.onSearchChange} /> */}\r\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList cats={filteredCats} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, MapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text,\r\n});\r\n\r\n// Higher order function - function that returns a function\r\nexport const requestCats = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_CATS_PENDING});\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then((response) => response.json())\r\n\t\t.then((data) => dispatch({ type: REQUEST_CATS_SUCCESS, payload: data }))\r\n\t\t.catch((error) => dispatch({ type: REQUEST_CATS_FAILED, payload: error }));\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_CATS_PENDING,\r\n\tREQUEST_CATS_SUCCESS,\r\n\tREQUEST_CATS_FAILED,\r\n} from './constants';\r\n\r\nconst initialState = {\r\n\tsearchField: '',\r\n};\r\n\r\n// Reducer\r\nexport const searchCats = (state = initialState, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateCats = {\r\n\tisPending: false,\r\n\tcats: [],\r\n\terror: '',\r\n};\r\n\r\nexport const requestCats = (state = initialStateCats, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_CATS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_CATS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tcats: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tcase REQUEST_CATS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { searchCats, requestCats } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchCats, requestCats });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}